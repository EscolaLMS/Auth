swagger: "2.0"
info:
  title: "Auth & Category Admin API"
  version: "0.0.1"
host: "escola-lms-api.stage.etd24.pl"
basePath: "/api/admin"
tags:
  - name: "users"
    description: "Operations about Users"
  - name: "categories"
    description: "Operations about Categories"
schemes:
  - "https"
  - "http"
paths:
  /users/me:
    get:
      tags:
        - "users"
      summary: "Lists data about logged in admin user"
      description: "This can only be done by the logged in Admin."
      operationId: "getMyProfile"
      produces:
        - "application/json"
      responses:
        default:
          description: "Current user data"
          schema:
            $ref: "#/definitions/User"
    patch:
      tags:
        - "users"
      summary: "Updates data about logged in admin user"
      description: "This can only be done by the logged in Admin."
      operationId: "updateMyProfile"
      produces:
        - "application/json"
      responses:
        default:
          description: "Updated user profile"
          schema:
            $ref: "#/definitions/User"
  /users/me/avatar:
    post:
      tags:
        - "users"
      summary: "Upload avatar for current user"
      description: "This can only be done by the logged in Admin."
      operationId: "uploadMyAvatar"
      produces:
        - "application/json"
      responses:
        default:
          description: "Current user data"
          schema:
            $ref: "#/definitions/User"
    delete:
      tags:
        - "users"
      summary: "Delete avatar for current user"
      description: "This can only be done by the logged in Admin."
      operationId: "deletemMyAvatar"
      produces:
        - "application/json"
      responses:
        default:
          description: "Updated user profile"
          schema:
            $ref: "#/definitions/User"
  /users:
    get:
      tags:
        - "users"
      summary: "Lists all users"
      description: "This can only be done by the logged in Admin."
      operationId: "listUsers"
      produces:
        - "application/json"
      responses:
        default:
          description: ""
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
    post:
      tags:
        - "users"
      summary: "Create user"
      description: "This can only be done by the logged in Admin."
      operationId: "createUser"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User object to be created"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation, returns created User data"
          schema:
            $ref: "#/definitions/User"
  /users/{id}:
    parameters:
      - name: "id"
        in: "path"
        description: "id that needs to be fetched/updated/deleted"
        required: true
        type: "integer"
        format: "int64"
    get:
      tags:
        - "users"
      summary: "Get single user"
      description: "This can only be done by the logged in Admin."
      operationId: "getUser"
      produces:
        - "application/json"
      responses:
        "200":
          description: "User data"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "User not found"
    patch:
      tags:
        - "users"
      summary: "Update user"
      description: "This can only be done by the logged in Admin."
      operationId: "updateUser"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Partial user data"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid id supplied"
        "404":
          description: "User not found"
    delete:
      tags:
        - "users"
      summary: "Delete user"
      description: "This can only be done by the logged in Admin."
      operationId: "deleteUser"
      produces:
        - "application/json"
      responses:
        "400":
          description: "Invalid id supplied"
        "404":
          description: "User not found"
  /users/{id}/settings:
    parameters:
      - name: "id"
        in: "path"
        description: "user id"
        required: true
        type: "integer"
        format: "int64"
    get:
      tags:
        - "users"
      summary: "Lists all user settings"
      description: "This can only be done by the logged in Admin."
      operationId: "listUserSettings"
      produces:
        - "application/json"
      responses:
        default:
          description: "List of all User Settings"
          schema:
            type: array
            items:
              $ref: "#/definitions/UserSetting"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "User not found"
    patch:
      tags:
        - "users"
      summary: "Updates list of UserSettings"
      description: "This can only be done by the logged in Admin."
      operationId: "setUserSettings"
      parameters:
        - in: "body"
          name: "body"
          description: "List of User Settings to be updated"
          required: true
          schema:
            type: array
            items:
              $ref: "#/definitions/UserSetting"
      produces:
        - "application/json"
      responses:
        200:
          description: "List of all User Settings"
          schema:
            type: array
            items:
              $ref: "#/definitions/UserSetting"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "User not found"
    put:
      tags:
        - "users"
      summary: "Sets (overrides) list of UserSettings"
      description: "This can only be done by the logged in Admin."
      operationId: "updateUserSettings"
      parameters:
        - in: "body"
          name: "body"
          description: "List of all User Settings"
          required: true
          schema:
            type: array
            items:
              $ref: "#/definitions/UserSetting"
      produces:
        - "application/json"
      responses:
        200:
          description: "List of all User Settings"
          schema:
            type: array
            items:
              $ref: "#/definitions/UserSetting"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "User not found"
  /users/{id}/interests:
    parameters:
      - name: "id"
        in: "path"
        description: "user id"
        required: true
        type: "integer"
        format: "int64"
    get:
      tags:
        - "users"
      summary: "Lists all user interests"
      description: "This can only be done by the logged in Admin."
      operationId: "listUserInterests"
      produces:
        - "application/json"
      responses:
        default:
          description: "List of Categories that User is interested in"
          schema:
            type: array
            items:
              $ref: "#/definitions/Category"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "User not found"
    post:
      tags:
        - "users"
      summary: "Adds category to interests"
      description: "This can only be done by the logged in Admin."
      operationId: "addUserInterest"
      parameters:
        - in: "body"
          name: "body"
          description: "Id of category to be added"
          required: true
          schema:
            type: object
            required:
              - interest_id
            properties:
              interest_id:
                type: "integer"
                format: "int64"
      produces:
        - "application/json"
      responses:
        200:
          description: "List of Categories that User is interested in"
          schema:
            type: array
            items:
              $ref: "#/definitions/Category"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "User not found"
    put:
      tags:
        - "users"
      summary: "Set list of Categories user is interested in"
      description: "This can only be done by the logged in Admin."
      operationId: "setUserInterests"
      parameters:
        - in: "body"
          name: "body"
          description: "List of categories to be set as user interests"
          required: true
          schema:
            type: object
            required:
              - interests
            properties:
              interests:
                type: "array"
                items:
                  type: "integer"
                  format: "int64"
      produces:
        - "application/json"
      responses:
        200:
          description: "List of Categories that User is interested in"
          schema:
            type: array
            items:
              $ref: "#/definitions/Category"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "User not found"
  /users/{id}/interests/{interest_id}:
    delete:
      tags:
        - "users"
      summary: "Removes interest (category) from user interests"
      description: "This can only be done by the logged in Admin."
      operationId: "removeUserInterest"
      parameters:
        - name: "id"
          in: "path"
          description: "user id"
          required: true
          type: "integer"
          format: "int64"
        - name: "interest_id"
          in: "path"
          description: "category id"
          required: true
          type: "integer"
          format: "int64"
      produces:
        - "application/json"
      responses:
        "400":
          description: "Invalid id or category id supplied"
        "404":
          description: "User not found"
  /categories:
    get:
      tags:
        - "categories"
      summary: "List all categories"
      description: "This can only be done by the logged in Admin."
      operationId: "listCategories"
      produces:
        - "application/json"
      responses:
        default:
          description: ""
          schema:
            type: array
            items:
              $ref: "#/definitions/Category"
    post:
      tags:
        - "categories"
      summary: "Create new category"
      description: "This can only be done by the logged in Admin."
      operationId: "createCategory"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Category object to be created"
          required: true
          schema:
            $ref: "#/definitions/Category"
      responses:
        default:
          description: "successful operation, returns created Category data"
          schema:
            $ref: "#/definitions/Category"
  /categories/{id}:
    parameters:
      - name: "id"
        in: "path"
        description: "id that needs to be fetched/updated/deleted"
        required: true
        type: "integer"
        format: "int64"
    get:
      tags:
        - "categories"
      responses:
        "200":
          description: "Category data"
          schema:
            $ref: "#/definitions/Category"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Category not found"
    patch:
      tags:
        - "categories"
      summary: "Update category"
      description: "This can only be done by the logged in Admin."
      operationId: "updateCategory"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Partial category data"
          required: true
          schema:
            $ref: "#/definitions/Category"
      responses:
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Category not found"
    delete:
      tags:
        - "categories"
      summary: "Delete category"
      description: "This can only be done by the logged in Admin."
      operationId: "deleteCategory"
      produces:
        - "application/json"
      responses:
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Category not found"
  /categories/{id}/courses:
    parameters:
      - name: "id"
        in: "path"
        description: "category id"
        required: true
        type: "integer"
        format: "int64"
    get:
      tags:
        - "categories"
      summary: "Lists all category courses"
      description: "This can only be done by the logged in Admin."
      operationId: "listCategoryCourses"
      produces:
        - "application/json"
      responses:
        default:
          description: "List of Courses belonging to given Category"
          schema:
            type: array
            items:
              $ref: "#/definitions/Course"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Category not found"
    post:
      tags:
        - "categories"
      summary: "Adds course to category"
      description: "This can only be done by the logged in Admin."
      operationId: "addCategoryCourse"
      parameters:
        - in: "body"
          name: "body"
          description: "Id of course to be added"
          required: true
          schema:
            type: object
            required:
              - course_id
            properties:
              course_id:
                type: "integer"
                format: "int64"
      produces:
        - "application/json"
      responses:
        200:
          description: "List of Courses belonging to given Category"
          schema:
            type: array
            items:
              $ref: "#/definitions/Course"
        "400":
          description: "Invalid id or course_id supplied"
        "404":
          description: "Category not found"
    put:
      tags:
        - "categories"
      summary: "Set list of Courses belonging to Category"
      description: "This can only be done by the logged in Admin."
      operationId: "setCategoryCourses"
      parameters:
        - in: "body"
          name: "body"
          description: "List of course to be set"
          required: true
          schema:
            type: object
            required:
              - course_ids
            properties:
              course_ids:
                type: "array"
                items:
                  type: "integer"
                  format: "int64"
      produces:
        - "application/json"
      responses:
        200:
          description: "List of Courses belonging to given Category"
          schema:
            type: array
            items:
              $ref: "#/definitions/Course"
        "400":
          description: "Invalid id or course_ids supplied"
        "404":
          description: "Category not found"
  /categories/{id}/courses/{course_id}:
    delete:
      tags:
        - "categories"
      summary: "Removes course from category"
      description: "This can only be done by the logged in Admin."
      operationId: "removeCategoryCourse"
      parameters:
        - name: "id"
          in: "path"
          description: "category id"
          required: true
          type: "integer"
          format: "int64"
        - name: "course_id"
          in: "path"
          description: "course id"
          required: true
          type: "integer"
          format: "int64"
      produces:
        - "application/json"
      responses:
        "400":
          description: "Invalid id or course_id supplied"
        "404":
          description: "Category not found"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      first_name:
        type: "string"
      last_name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      is_active:
        type: "boolean"
      remember_token:
        type: "string"
      created_at:
        type: "string"
        format: "date-time"
      updated_at:
        type: "string"
        format: "date-time"
      password_reset_token:
        type: "string"
      email_verified_at:
        type: "string"
        format: "date-time"
      login_day_streak:
        type: "integer"
        format: "int32"
      path_avatar:
        type: "string"
      gender:
        type: "integer"
      age:
        type: "integer"
      country:
        type: "string"
      city:
        type: "string"
      street:
        type: "string"
      postcode:
        type: "string"
      instructor:
        $ref: "#/definitions/Instructor"
      settings:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/UserSetting"
      courses:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/Course"
      cart:
        $ref: "#/definitions/Cart"
      orders:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/Order"
      interests:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/Category"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      slug:
        type: "string"
      icon_class:
        type: "string"
      is_active:
        type: "boolean"
      created_at:
        type: "string"
        format: "date-time"
      updated_at:
        type: "string"
        format: "date-time"
      parent_id:
        type: "integer"
        format: "int64"
      icon:
        type: "string"
      parent:
        type: "object"
        readOnly: true
        allOf:
          - $ref: "#/definitions/Category"
      children:
        type: "array"
        readOnly: true
        items:
          type: "object"
          allOf:
            - $ref: "#/definitions/Category"
      courses:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/Course"
  UserSetting:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        format: "int64"
      key:
        type: "string"
      value:
        type: "string"
  Instructor:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
  Course:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
  Cart:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
